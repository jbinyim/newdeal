모듈 => 함수(인수 구성)

npm i nodemon
-> 서버를 새로고침 안해도 자동적으로 새로고침해줌
-> npx nodemon 파일주소

------------------------------------------------------------------
*express

npm i express
-> routing 방법 간소화

app.use(express.json());
-> json형태 파싱 하기 위한 미들웨어?

res.sendFile(__dirname + "/sample.html");
-> 파일로 여는 방법

app.use("/contacts", require("./routes"));
-> use를 이용하여 router연결

const router = express.Router();
-> 페이지 라우터 

npm i express-async-handler
-> try catch문을 사용할떄 하나씩 try catch를 입력할 필요없이 한번만 사용할 수 있도록 도와주는 역할
-> controllers에서 사용 예시
-------------------------------------------------------------------
Thunder Client
-> vsCode 확장자
-> 가상클라이언트
-> get 방식외에는  웹브라우저에서 보기 힘들어서 임시로 사용
-----------------------------------------------------------------
MongoDB for VS Code
-> vsCode 확장자
-> 피그마에 설명참고

EJS language support
-> ejs확장자
-> 프리티어같은거
npm i mongoose dotenv
-----------------------------------------------------------------
npm i ejs
-> view 엔진
-----------------------------------------------------------------
- 몽고DB는 자동으로 아이디값을 생성 (sql , mysql...등은 내가 설정?)
-----------------------------------------------------------------
- get, post , put, delete (크게 4가지 방식이다)
- MVC 방식으로 만듬
- config로 DB연결

1. 스키마: 자료 정의
2. 모델링

<%= 변수 %>
<% 자바스크립트 %>
<%- HTML %>


fomr으로 만들어서 보낼때 꼭 method=POST 를 써야한다

컨트롤러 함수 기능 부여
경로지정
뷰(add.ejs)

Ajax라는 기법

npm i method-override
-> 원래 method는 get 과 post만 되는데 이걸 이용하면 put과 delete등을 사용할 수 있다


app.use(express.urlencoded({ extended: true }));
-> 충돌이일어나도 그냥 넘기겠다는 코드
-----------------------------------------------------------------



npm i bcrypt
-> 비밀번호 암호화

const bcrypt = require("bcrypt")

const registerUser = asyncHandler (async(req,res) => {
  const {id, pw} = req.body
  if (pw) {
    const hashedpw = await bcrypt.hash(pw, 10)
    console.log(hashedpw)
    const user = await User.create(id, pw: hashedpw)
    res.status(201).json({message: "register successful", user})
  }
})